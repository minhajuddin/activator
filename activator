#!/usr/bin/env ruby
require 'rubygems'
require 'libnotify'

#this script gets executed every minute

def active?(criteria)
  true
end

def act(action, &block)
  if action[:message]
    Libnotify.show( :body => action[:message], :summary => "Alarm", :timeout => 2.5, :icon_path => File.join(File.dirname(__FILE__),'../resources/clock.png'))
  elsif block_given?
    yield
  end
end

def trigger_when(criteria, action={}, &block)
  if active?(criteria)
    act(action, &block)
  end
end

module Activator
  #code copied from http://github.com/minhajuddin/dnotify
  class Setup
    require 'fileutils'
    require 'tempfile'

    #ConfigPath = File.expand_path "~/.dnotifyrc"

    def self.run
      setup unless check
      write_crontab
    end

    def self.setup
      FileUtils.cp(File.join(File.dirname(__FILE__), '../resources/dnotifyrc.sample.yaml'), ConfigPath)
      puts "copied default template to #{ConfigPath}"
    end

    def self.write_crontab
      existing_crontab = `crontab -l`
      return if existing_crontab =~ /dnotify/i
      #copied from https://github.com/javan/whenever/blob/master/lib/whenever/command_line.rb
      puts 'setting up cron'
      tmp_cron_file = Tempfile.new('dnotify_tmp_cron').path
      File.open(tmp_cron_file, File::WRONLY | File::APPEND) do |file|
        file << existing_crontab << "* * * * * /bin/bash -l -c 'dnotify' > /tmp/dnotify.log 2>&1\n"
      end
      puts `crontab #{tmp_cron_file}`
    end

    def self.check
      config_present = File.exists?(ConfigPath)
      if config_present
        puts 'dnotify is setup'
      else
        puts "no config file(#{ Setup::ConfigPath }) exists"
      end
      config_present
    end

  end
end


#event declaration
trigger_when({:day => 7, :time => '10:30'}, {:message => 'Awesome message'})
trigger_when({:day => 7, :time => '10:30'}) do
  puts 'awesome stuff happens'
end

